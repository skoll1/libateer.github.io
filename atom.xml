<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李巴特儿de小屋子</title>
  <subtitle>...触之不动...</subtitle>
  <link href="/libateer.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/skoll1/libateer.github.io/"/>
  <updated>2017-03-07T10:23:55.000Z</updated>
  <id>https://github.com/skoll1/libateer.github.io/</id>
  
  <author>
    <name>李巴特儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-6/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-6/</id>
    <published>2017-03-07T09:54:30.000Z</published>
    <updated>2017-03-07T10:23:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：js的数字只有一种类型，他把所有的数字都成为浮点型数字。但是他会在内部做优化并且区分浮点数字和整数，但是程序员都看不到。—所以一个数字字面量可以使整型，也可以是浮点型，或者16进制。</p>
<p>2：123 ..toString() 把数字转为字符的时候要注意浮点和转化方法用的那个点的区别。</p>
<p>3:number(undefiend) number(‘undefined’);–NaN;将任意值转换为数字常用的方法。+value;</p>
<p>4:number(‘’)–0,</p>
<p>5:parseFloat()只转字符串类型的数字就可以了，因为他的原理是先把里面的东西转为字符串，这样就会的出我们不想要的东西。通常nmunber是更好的选择。</p>
<p>6：</p>
<p>7：在js中，所有的数字都是浮点数，整数是没有小数点的浮点数。讲一个数字转换成整数意味着找到最近的与他接近的整数。</p>
<p>8：方法-：math.ceil()math.round().Math.floor(). 方法2：Tointeger()函数chrome报错了 方法3：位运算符 方法4：parseInt();函数。该函数会尽可能的忽略前面的空白并且尽可能多的查找数字转换。</p>
<p>9：不要使用parseInt（）转换数字为整型，因为他会先强制的转为字符串的。他只是适用于解析字符串非常有用，也是一旦遇到非法字符就会停止解析。</p>
<p>10:number % number 求余数：他不是取模，因为他会返回与第一个操作数字符号相同的值。而取模会返回与第二个数字符号相同的值。</p>
<p>11：parseFloat:将str转换为一个浮点数。parseInt（）也是这样。他们操作的目标都是str.</p>
<p>12:number的构造器属性，number原型方法。</p>
<p>13：number.MAX_SAFE_INTEGER  NUMBER.MAX_VALUE </p>
<p>parseFloat(true)==parseFloat(‘true’)–NaN</p>
<p>parseFloat(null)–NaN</p>
<p>parseFloat（）会一直解析到最后一个字符的。也有可能导致错误。</p>
<p>var str=”123 3#”;–Number(str)-NaN, parseFloat(str)–123  忽略开头的空格，并且在非法字符之前停止（本例是空格）。但是number（）会忽略开头和结尾的空格，但是任何非法的字符都会导致他返回NaN；本例也是空格。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：js的数字只有一种类型，他把所有的数字都成为浮点型数字。但是他会在内部做优化并且区分浮点数字和整数，但是程序员都看不到。—所以一个数字字面量可以使整型，也可以是浮点型，或者16进制。&lt;/p&gt;
&lt;p&gt;2：123 ..toString() 把数字转为字符的时候要注意浮点和转
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-5/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-5/</id>
    <published>2017-03-07T09:53:19.000Z</published>
    <updated>2017-03-07T10:23:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：闭包：一个函数外加上该函数所创建时所建立的作用域。闭包的名字来源于闭包“关闭”一个函数中自由变量的访问的权利。我们所说的变量是自由的，是指该变量定义在函数外部的，而非函数内部。这个不懂。。。。如果一个函数访问了它的外部变量，那么它就是一个闭包。<br>2：function create(start){return function(step){start+=step;return start;}};var inc=create(5)(1);<br>3：闭包是一个代码执行完成后离开作用域环境依然存在的例子。这个懂。。<br>4：for(var i=0;i&lt;5;i++){ (function(){return function(){return i;}result.push(i)}())};不成功的闭包。<br>5:var result=[];<br>        for(var i=0;i&lt;5;i++){<br>            (function(){<br>                var func=function(){<br>                    return i;<br>                };<br>                result.push(func)<br>            }());<br>        }二改，还是出来的函数。返回的数组<br>6：var result=[];<br>        for(var i=0;i&lt;5;i++){<br>            (function(){<br>                var pos=i;<br>                var func=function(){<br>                    return pos;<br>                };<br>                result.push(func)<br>            }());<br>        }三改，<br>7：函数变量可以保存在函数的作用域内，因此看起来就好像是函数将变量包起来了。包含变量的函数就是闭包。—有权访问另一个函数作用域内变量的函数就是闭包。<br>8：函数声明和函数表达式。给一个函数加上括号就把他从一个声明变成了表达式。可以直接调用。<br>9：闭包的三个条件：访问所在的作用域，函数嵌套，在所在作用域外被调用。<br>10：初级阶段：function f(value){var b=value;return function(){return b;}};f(‘libateer’)();<br>11：高级一点：var n;function f(){var b=1123;n=function(){return b;}};n();<br>12: 在高级一点：function show(first,last){var name=”hello”;function make(){return name+first+””+last}return make()};show(“lilei”,”wanggua”);<br>13：在高级一点：(function (first,last){var name=”hello”;function make(){return name+first+””+last}return make()})(str,str);<br>14:for(var i=0;i&lt;7;i++){(function (first,last){var name=”hello”;function make(){return name+first+””+last}return make()})(i-100,i+100);}和上面那个差不多了吧。。<br>15:在在高级一点：function hello(){var name=999;return {get:function(){return name;},set:function(id){name=id;}}}var f1=hello();f1.set(‘lailai’);f1.get();<br>16:找到那个怎么搞的了？function f(){var a=[];for(var i=0;i&lt;4;i++){a[i]=function(){return i;}}return a;};var a=f();和原来出的一样现在f()函数出来的还是函数，所以要这样a<a href="">1</a>;我要取到他的函数，在把这个函数表达出来。但是现在他的值还是4.是最后的，所以要在那里吧那个替换了。var pos=i；来个这个东西。<br>17:闭包的经常用法：var db = (function() {<br>// 创建一个隐藏的object, 这个object持有一些数据<br>// 从外部是不能访问这个object的<br>var data = {};<br>// 创建一个函数, 这个函数提供一些访问data的数据的方法<br>return function(key, val) {<br>    if (val === undefined) { return data[key] } // get<br>    else { return data[key] = val } // set<br>    }<br>// 我们可以调用这个匿名方法<br>// 返回这个内部函数，它是一个闭包<br>})();</p>
<p>db(‘x’); // 返回 undefined<br>db(‘x’, 1); // 设置data[‘x’]为1<br>db(‘x’); // 返回 1<br>// 我们不可能访问data这个object本身<br>// 但是我们可以设置它的成员<br>17：函数的参数和变量不会被垃圾回收机制所回收，因为他是一只被另一个函数所引用的。<br>18：闭包的好处：希望一个变量长期的驻扎到里面，避免全局变量的污染。<br>19：回到初级：function aaa(){var a=1;return function(){a++;console.log(a)}};var b=aaa()不论是这种形式，还是下面的function aaa(){var a=1;var a=function(){a++;console.log(a)};return a;};一开始都要这样：先把原函数取出来。<br>20：var a=(function(){var a=1;return function(){a++;console.log(a)}})();有那么点意思了，a();执行时变成了这样。、<br>21：用法：模块化代码，私有成员方法的存在。<br>22:var a=(function(){<br>            var a=1;<br>            function a1(){<br>                a++;<br>                console.log(a);<br>            }<br>            function a2(){<br>                a+=3;<br>                console.log(a+100);<br>            }<br>            return {<br>                a1:a1,<br>                a2:a2<br>            }<br>        })()我让他私有了。。a.a1();<br>23：又来了：window.onload=function(){<br>            var Oli=document.getElementsByTagName(‘li’);<br>            for(var i=0;i&lt;Oli.length;i++){<br>                var pos=i;<br>                Oli[i].onclick=(function(){<br>                    console.log(pos);<br>                })(pos);<br>            }–改造以后for(var i=0;i&lt;Oli.length;i++){</p>
<pre><code>        Oli[i].onclick=(function(i){
            return function(){console.log(i)}
        })(i);
}可以不给上面括号的加参数，但是不能不给下面的传参数。但是这个是自执行函数，不点击都会出结果。
</code></pre><p>24：(function(i){<br>                    Oli[i].onclick=function(){<br>                        console.log(i);<br>                    }<br>                })(i)为什么变成这个就是两个都要加I而且他还不会是自执行的函数。<br>15：闭包注意：IE下的内存泄漏：<br>16:函数表达式的形式：var a=function(){console.log(a)};(function(){console.log(a)})() 函数表达式可以直接加一个（）执行。<br>25：函数声明会被欲解析出来，如果我们想要在一些语句中实现不用的函数，一定要用函数表达式。匿名函数表达式和具名函数表达式。<br>26：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：闭包：一个函数外加上该函数所创建时所建立的作用域。闭包的名字来源于闭包“关闭”一个函数中自由变量的访问的权利。我们所说的变量是自由的，是指该变量定义在函数外部的，而非函数内部。这个不懂。。。。如果一个函数访问了它的外部变量，那么它就是一个闭包。&lt;br&gt;2：functio
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-4/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-4/</id>
    <published>2017-03-07T09:52:18.000Z</published>
    <updated>2017-03-07T10:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>1 :Try{}catch(){}finally{}catch会捕获到前面抛出的异常，无论是直接抛出的还是函数调用的异常。如果想要区分这两种异常。可以使用构造器实现。<br>2：无论发生了什么？finallly是永远都会执行的东西。<br>3：形参是在函数创建的时候括号里面写的东西，实参是在调用函数的时候添加的具体值。<br>4： 函数声明：function add(x,y){return a+b}；<br>5：函数表达式 var add=function(x,y){retrurn a+b;}<br>6: 大多数的Js引擎对于函数对象都会提供一个非标准的name属性，这个对与debug非常有用。<br>7：在定义函数的时候应该使用函数声明：第一是可以函数提升，第二是他们具有名字。<br>8：控制函数的调用：func.apply(thisValue,argArray)<br>9: apply()用在一个函数需要以类似数组的形式接受多个参数，在非面向对象的调用中他是不必要的，这里我们把它设定为null.thisValue这个值是用来制定这个函数执行时this的值。<br>10: bind（thisValue,rg1…argN）会执行原函数的函数功能，他会创立一个新的函数，这个函数会调用原函数，并将this替换为Thisvalue，同时应用以下参数。<br>11:function add(x,y){return x+y}  var ad=add.bind(null,1,2,3,4,5,6,7);<br>12: 参数缺失的时候：形参会被赋予undefined,实参数量多于形参，多余的参数会被忽略。<br>13：arguments是数组但又是非数组的。一方面，他有一个length属性，所有的参数都可以通过索引值来读写。他是一个对象，支持所有的对象的方法和操作。<br>14： 强制性参数，限制参数的最小值。可选参数。通过检测传入的参数的值来时先这一操作。单独使用这一种检测方法会出现漏洞。。。<br>15：非预期的可选参数：如果你要将一个函数c作为另一个函数f的参数引入，那么你需要注意一下另种情况：1：函数f签名声明需要传入的参数。f可能提供多个参数，C决定使用哪个参数。2：C的实际签名，他可能支持的可选参数。<br>[1,2,3].map(function(x){return parseInt(x,10)});必须格外声明函数接受哪些参数，同事你会传入哪些参数。<br>16： 具名参数的优点：他对函数的参数进行了描述，同属对于可选参数的场景的实现也很有帮助。在JS中模拟具名参数。将对象作为一个实参传入函数。function add(numbers){number=numbers||{};var num1=oprions.start||0;var num2=numbers}<br>14： 变量的作用域指的是变量在何处可以访问到。<br>15：js的变量是函数作用域级别的，不像其他的语言，是以块来划分作用域的，在js中，只有函数可以创建新的作用域。<br>16：举个例子就是说，如果你不想总的变量被污染，就可以做一个立即执行函数，把变量包起来。以实现对块的模拟。对于立即执行函数来说。有以下需要注意的：他必须是个表达式，而且后面必须有分号。如果在两个立即执行函数中间漏掉分号，那么系统就会认为他们两个是一个函数调用，前面是函数，后面是变量。<br>17：其他两种方式：!function(){console.log(“123”)}(); void function(){console.log(“hahah”)}();就和后面加分号没关系了。。。<br>18:var x=23;(function(){var t=x<em>2;console.log(t)}());(function (t){console.log(t)}(x</em>2));一开始–后来<br>19：立即执行函数的应用：避免全局变量，隐藏全局作用域的变量。创建新环境避免共享。保持全局对象对于构造器函数的相对独立。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 :Try{}catch(){}finally{}catch会捕获到前面抛出的异常，无论是直接抛出的还是函数调用的异常。如果想要区分这两种异常。可以使用构造器实现。&lt;br&gt;2：无论发生了什么？finallly是永远都会执行的东西。&lt;br&gt;3：形参是在函数创建的时候括号里面
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-4</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-3/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-3/</id>
    <published>2017-03-07T09:51:36.000Z</published>
    <updated>2017-03-07T09:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：原始值与对象最大的区别是如何比较的，每个对象有唯一的标识符并且只和自己相等。相反，所有的原始值只要编码相同，就认为是相等。</p>
<p>2：如果函数中没有任何显示的返回值得话，那么会隐式的返回undefined.</p>
<p>3:undefined更多的时候表示的是不存在的元素，比如未初始的变化量，缺失的参数，访问一个不存在的属性。函数中没有任何显示的返回值。</p>
<p>4：检测undefined.if(x===undefined) {}还可以用typeof 不过一般推荐是第一个方法。</p>
<p>5：null:他的意思是没有对象。常用来表示空值。undefiend表示删除一个对象属性或是数组元素。null表示将属性或者元素设置为空。</p>
<p>6：null：由于Js采用了java中的将变量分为原始值和对象的处理方式。同时也使用java中表示“非对象”的值null.遵循java的例子，当对null强制转换的时候，会出现0.</p>
<p>8：为了弥补上面null的缺点引入了undefiend，那就是这个值没有指向性，这个值强制转换不回变成0。</p>
<p>7：防止改变undefiend:if(x===void){}</p>
<p>9：null出现：当正则匹配不到，或者是对象间没有原型关系的时候。</p>
<p>10: typeof能检测原始值和对象，并检测出原始值得类型。</p>
<p>11:instanceof 用来检测一个对象是否是特定构造函数的一个实例。</p>
<p>12：typeof null=object   null instanceof  object().false.</p>
<p>13:NaN 他的类型居然是number 出现的原因：number()中不能被解析的数字。失败的操作Math.log(-1) 其中一个数是NaN的计算。</p>
<p>14：检查一个值是否是NaN  function(value) {retrun value!==value;还有个原生函数：isNaN（）；</p>
<p>为什么IsNaN（）不能检测非数字。。。他的原理是这样的：先把这些值转为数字，然后转换可能变成NaN,所以返回错误的结果。最好就是检测值的类型，并且使用IsNaN（）函数。</p>
<p>15：infinity：是一个错误值，一是表示一个大到无法表示的数，一是表示一个数除了0.infinity比任何数字都大。-infinity比任何值都小。</p>
<p>16：全局函数isFinite();检测一个数字是不是实际的值。既不是NAN也不是infinity.</p>
<p>17:由于js中所有的数字和符号是分开存储的，所以每一个非负数都由一个负值，包括0.有符号的0可以知道数字是从哪方面接近0的。</p>
<p>18：js数字是64位的，也叫做双精度。通常是按照十进制引入的，但是在内部时他们其实是二进制的浮点数表示的。在处理舍入错误的时候，通常推荐的是不直接比较非整数，取而代之，将边界错误的上界考虑进来。这个上界叫机器精度。把他变大来比较细微的差别。</p>
<p>19：整型数字的范围问题：安全整型：+-Math.pow(2,53)  数组索引：【0，Math.pow(2,32)-1】通常情况下，和不超过53位的整型数字打交道是没问题的，一旦遇到这些超过的，他们必须要以字符串的形式存储起来，一旦要对他们进行运算，要特殊的库来实现。</p>
<p>20：安全的整型：js只能安全的表示上述所说的范围内的数，一旦超过这个范围内的整型。，那么久和一般的实数集可能不会发生一一对应的关系了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：原始值与对象最大的区别是如何比较的，每个对象有唯一的标识符并且只和自己相等。相反，所有的原始值只要编码相同，就认为是相等。&lt;/p&gt;
&lt;p&gt;2：如果函数中没有任何显示的返回值得话，那么会隐式的返回undefined.&lt;/p&gt;
&lt;p&gt;3:undefined更多的时候表示的是
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-3</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-2/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-2/</id>
    <published>2017-03-07T09:50:27.000Z</published>
    <updated>2017-03-07T09:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：所有的运算符都会强制要求他们的运算数为合适的类型。大部分运算符只会对原始值有效，这意味着对象在运算之前会被转换成原始值。【1，2】+【3】1,23.</p>
<p>2:[‘li’,2]+[2]-li,22   [1,2]+{name:”ha”}–NAN辛亏是这个….</p>
<p>3:obj[‘age’]=20,如果是方括号给对象加属性的话就这样玩。</p>
<p>4：=== 相等的如下。</p>
<p>5：undefined===undefined  ,,null===null,undefined==null,+0===-0,NaN!==NaN 特别要注意的就是两个对象的比较。</p>
<p>6：陷阱1：</p>
<p>7:陷阱2：宽松相等中的字符串。</p>
<p>8陷阱3：宽松相等中的对象。如果比较对象和非对象，他们会被转换为原始值，这将导致一些奇怪的结果。</p>
<p>9:用法：检测 undefined,null if(x!==undefiend&amp;&amp;x!==null){}–更简单的 if(x!=null)实现的效果是一样的。</p>
<p>10：检测处输入值是什么？ if(Number(x)==123){}</p>
<p>11：加号运算符注意的两点：只要一个运算数是字符串，另一个就会转换为字符串相加。否则转变为两个运算数并且相加算他们的和，包括布尔值。。所以要特别注意他们的顺序，因为顺序的改变会造成这两中情况的出现。</p>
<p>12：布尔运算符（二元运算符和逻辑非）数字运算符（数字运算符，位运算符）都是那种只有一个值，并且返回结果是原值的例子。</p>
<p>13：vodi运算符，是用来表示那些不需要返回值的地方。比如你添加一个标签。当你想要打开一个新的窗口而不想要改变当前的显示内容的话就可以这样 javascript:viod window.open(‘<a href="http://example.com" target="_blank" rel="external">http://example.com</a>‘)</p>
<p>14:转换为flase的boolean()函数值有这些。NAN,0,’’,false,undefied,null. 注意Boolean(‘false’).这里false是一个字符串，所以他是正确的。true.</p>
<p>15:三种转换布尔值得方法：blloeab().  value?true:false. !!value.</p>
<p>16:除了上面列举的那些，所有其他的都是真值，甚至空对象，空数组，以及new Blloean(false)。</p>
<p>17：逻辑运算符：总是会返回两个中间的一个值，一旦一个返回，后面的东西就不看了。</p>
<p>18：逻辑运算符：为选的东西添加一个默认值。text=text||’’;还可以为结果添加默认值。总之就是有和没二选一的时候可以用这个。</p>
<p>19：Boolean（）函数的两种用法，1：boolean(value)  2:new Boolean(flase);</p>
<p>19:</p>
<p>{}==’[object,object]’-true  [‘123’]==123 []==0–true</p>
<p>然而，只有当两个对象是同一个对象时才会相等，这意味着没法真真比较两个包装对象。都是错误。false.</p>
<p>7：宽松相等和布尔转换不一样。他们的原理不一样。</p>
<p>2==true  //2==1–false</p>
<p>2==false //2==0–false</p>
<p>1==true //1==1–true</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：所有的运算符都会强制要求他们的运算数为合适的类型。大部分运算符只会对原始值有效，这意味着对象在运算之前会被转换成原始值。【1，2】+【3】1,23.&lt;/p&gt;
&lt;p&gt;2:[‘li’,2]+[2]-li,22   [1,2]+{name:”ha”}–NAN辛亏是这个….&lt;/
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-2</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-1/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-1/</id>
    <published>2017-03-07T09:49:04.000Z</published>
    <updated>2017-03-07T09:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：显示问题的唯一来源是css。行为问题的唯一来源是Js.</p>
<p>2:方括号访问法的好处是可以通过变量来访问元素属性。</p>
<p>3：优化内存占用是最优的方式，一旦发现数据不再使用，就把他变成null.</p>
<p>4:如果初始化变量没有用到var 会自动归到全局环境中。甚至还会出现很多不可预料的错误。</p>
<p>5：绝对定位可以脱离当前文档流，甚至别的元素都不知道有这个东西。</p>
<p>6：当scale()被添加负值的时候，会让一个元素来回翻转。</p>
<p>7：base64图片是在网速不好的时候，优先然内容加载和减少http的请求次数来减少网站服务器的负担。当网速不好的时候去访问天猫的网站的时候，在页面没有出来的时候会出现一个小猫的图标。增加了用户体验，实现原理就是把base64的编码放大css中。是因为css先于页面内容加载的。一堆连续字母，最后有1~2个”=”的代码就是base64。这样做可以减少http请求，某些文件可以避免跨域的问题。没有图片更新要重新上传，还要清理缓存。</p>
<p>8：需要用这个图的地方：一些图片自诞生之处，就很少需要改变。这类图片尺寸很小。这类图片在网站中需要大量使用。</p>
<p>9：想要删除一个节点的时候，先找到他的父元素，从父元素那里removeChild();</p>
<p>10:script标签也有自己的一些属性来调节自己文件执行的顺序，但是就是不知道现在的兼容性怎么样？</p>
<p>11：递增，递减符号可以对任何类型的值使用，但是那个操作的实际意义是什么？</p>
<p>12：字符串必须写在双引号里面，想在里面添加特殊字符，必须要用转义字符。\</p>
<p>13:给元素添加属性：！符号可以改变具有布尔属性值的正确与否。</p>
<p>14：虽然Boolean()的值只有两个，但是js函数中所有类型的值都可以转成与这两个值等价。!完全代替，一个符号。。</p>
<p>15：number()方法是强制转换整个字符串，由于他的转换他复杂，一般情况下都是用parseInt()来转的，他的第二个参数用来限制要转的进制。</p>
<p>16：字符串是不能被改变的，当他被创建出来的，除非再次删除，重新创建一个。</p>
<p>17：逻辑与&amp;&amp;属于短路操作符，即当前面的条件出结果后，后面就不会再就算了。可以利用或的这一行为来避免变量赋值为null,undefined.</p>
<p>18：字符串之间比较大小是在比价哦两个字符串中的对应的每个字符的编码值。和加减操作一样，这些在比较相等都是先转换格式在比，那不是废话么？如果你格式都不一样，还提什么别的东西。</p>
<p>19：return 可以不带参数，当需要停止当前函数又不需要返回值的时候就可以这么做。</p>
<p>20：没有真正意义上的重载，有的只是覆盖，后一个覆盖前一个。不存在函数签名的概念。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：显示问题的唯一来源是css。行为问题的唯一来源是Js.&lt;/p&gt;
&lt;p&gt;2:方括号访问法的好处是可以通过变量来访问元素属性。&lt;/p&gt;
&lt;p&gt;3：优化内存占用是最优的方式，一旦发现数据不再使用，就把他变成null.&lt;/p&gt;
&lt;p&gt;4:如果初始化变量没有用到var 会自动归到
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-1</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-0/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-0/</id>
    <published>2017-03-07T09:45:05.000Z</published>
    <updated>2017-03-07T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：对象只能和自己相等。甚至两个空对象都不相等。</p>
<p>2：基本类型都是不可以添加属性的。</p>
<p>3：利用arr.length可以做出很多精彩的操作。</p>
<p>4：typeOf ,instanceOf 分别是用来检测基本变量和对象的属性的。</p>
<p>5：typeOf {}:object,typeOf undefined:undefined,typeOf null:object,typeOf true boolean.</p>
<p>6:Boolean()是一个用来测试真假的函数，只会返回布尔值。Boolean({}),Boolean([]),返回true。表示里面有0个元素这是对的。。</p>
<p>7：Js中所有的数字都是浮点数。1===1.000。</p>
<p>8：函数声明具有提升的特性，这意味着我们可以用到下面定义的函数，但是var 声明的变量，只会提升变量的位置，而不会去管他的值得位置在哪。</p>
<p>9：数组可以有自己的属性，因为他本质上是一个对象。</p>
<p>10：在使用this的时候可以把不同层次的this保存起来就不会出现this指代不明的情况了。</p>
<p>11：立即执行函数可以使防止全局变量的出现。</p>
<p>12：闭包会持续的与内部变量连接，但是有的时候我们可能不需要这个东西.</p>
<p>13：数组当中可以添加对象，对象中也可以添加数组。</p>
<p>14：通过【】或是“.”来应用对象属性或数组元素的值来构成一个表达式。</p>
<p>15：用var 定义的变量，成为该定义域内的局部变量，这个变量在退出取得时候就会立刻被销毁</p>
<p>16：表示输入的最大和最小值，每个字母都是大写或者小写的。</p>
<p>17：不同类型之间加减号操作引发强制转换。</p>
<p>18：速度永远让人兴奋。</p>
<p>19：在编写dom脚本的时候，你会想当然的认为这个是dom元素节点，这是一种常见的错误，可以查看这个元素的nodeType属性，许多只能在元素节点的方法，是不能用在文本节点的。</p>
<p>20：函数名字命名的时候：getresult. isShow.</p>
<p>当需要引出对象内的函数，他所指的对象可能会发生变化，这个时候需要给他加个bind(此处是原来的对象名字)；让他找到回家的路就可以了。<br>var result=[];</p>
<p>for(var I=0;i&lt;6;i++){</p>
<p>result[I]=i……..result.push(i);都可以的。</p>
<p>result.push(function(){return I;}) 返回的都是空函数为什么？但是只要把这个变成立即执行函数就可以了。。</p>
<p>}<br>function pair(x,y){x=x||0;y=y||0;return  [x,y];}</p>
<p>pair():[0,0]</p>
<p>利用这个特性可以做到自动填充东西。可以给他后面加上数组。就可以填充名字了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：对象只能和自己相等。甚至两个空对象都不相等。&lt;/p&gt;
&lt;p&gt;2：基本类型都是不可以添加属性的。&lt;/p&gt;
&lt;p&gt;3：利用arr.length可以做出很多精彩的操作。&lt;/p&gt;
&lt;p&gt;4：typeOf ,instanceOf 分别是用来检测基本变量和对象的属性的。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/05/hello-world/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/05/hello-world/</id>
    <published>2017-03-05T12:10:52.000Z</published>
    <updated>2017-03-05T12:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
