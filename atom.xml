<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李巴特儿de小屋子</title>
  <subtitle>...触之不动...</subtitle>
  <link href="/libateer.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/skoll1/libateer.github.io/"/>
  <updated>2017-03-07T16:16:56.000Z</updated>
  <id>https://github.com/skoll1/libateer.github.io/</id>
  
  <author>
    <name>李巴特儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>罗辑思维听后感</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/08/best-2-1/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/08/best-2-1/</id>
    <published>2017-03-07T16:11:58.000Z</published>
    <updated>2017-03-07T16:16:56.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>每一个人都会觉得自己人生匆匆忙忙，但实际上每个人都会有很多自己独自面对自己的时刻，暂时和外界没有太明显的联系，又不用因为生存资源做努力，突然就空出了一点时间，而这段时间就死行为人必需面对自己的时刻，关于这段时间，大部分人不知道怎么做，然后慌乱的应对这段时间。最明显的是好想有很多事情又不知道该怎们做，感觉有什么放不下的想马上行动，又一时找不到切入点。这就是我们所想的过剩的烦恼，而游戏所扮演的，就是暂时缓解这种对峙面对自己的焦灼，并且游戏必需超越其他休闲娱乐部分说产生的愉悦价值在哪段时间内，这种注意力的强度完全超越了任何事情，还可能从专注衍生出特定的感情依赖。</li>
<li>要么公开的“精神怀旧”，要么根据实际，逐步的，有选择的认可和回忆苦难。</li>
<li>清风不识字，随便乱翻书。</li>
<li>真是的历史好像是一种只有你发明了显微镜，并且用它仔细找才能发现的东西，置于真相，总是有一些东西自己不去找永远没人给你说。</li>
<li>国家机器早已不行，但是还有各种支持这一国家机器的外在因素，比如舆论，新市民，以及在野的乡绅。因为此事有世界外的东西对他们形成了保护。所以他才不会一腐朽就完蛋。</li>
<li>中国近代史：</li>
<li>英国喜欢实行间接统治，不仅可以实现利益最大化，而且可以隔绝底人民对上层人民的憎恨，这对于次消除名族矛盾，乃至伪装殖民统治来说大有裨益。</li>
<li>英国对中国政策的基本核算：此事世界早已进入了殖民统治，大英帝国在许多地方都建立了殖民地，不过此时英国还是一个上任国家，在指定对外政策上面都是要合算成本的，究竟是把他当成殖民地还是保持其原来的样子，有英国人来直接统治，还是扶植代理人。思考这些都是要看成本如何，所以当一个地方没有多少人的时候，而且又缺乏相应的组织或是政府机构的时候，那么就需要因果人将其占领作为殖民地。</li>
<li>其实在这个时候英国极其他欧洲国家派出去的使节都是有极其强大的外交自主权利的，但是的外交运作和后来的事不一样的，因为交通的不变，所以他们有很大的便宜行事的权利，但是中国就不一样了。</li>
<li>中国的历史上来看，皇帝是政治权威，但是思想，理论权威是孔子，士大夫择扮演一个孔子思想阐释者的角色，但是乾隆则先要剥夺这一个角色。他不认为士大夫应该有平天下这个理想，这种事情应该交给皇帝来做，乾隆自己阐释经典，而且一大帮士大夫拍马屁，说皇上圣明。</li>
<li>这让他知道了什么是强国的意义，不是日本那样版的穷兵黩武，不是德国那样的气势逼人，而是美国这样的藏富于民。</li>
<li>老虎吃人为什么不能打，老虎只有饿极了才吃人，我在这山里打了及时多年的猎物，从未听过老虎吃人，这茫茫大山，浪虫虎豹和人类总有相处之道，不管是野兽还是人，都是为了吃饭才打猎，为了吃老虎打老虎，坏了山神的规则可不是好事。</li>
<li>木棉花的话语：春秋冬夏都是绿色的，生长的旺盛的墨绿摩旅，但是到了夏天，一切有又会不一样，他开始释放他的魔力，一点一点，把内心最邪恶最妖娆的气质解脱出来的，把绿色赶紧杀绝，光秃秃的指头突兀的绽放鲜艳魅惑的花朵，干柴烈火那样奋不顾身的熊熊燃烧，颜色单调确不低调。木棉花的话语是珍惜身边的人，珍惜身边的人给他带来的快乐和荣耀。</li>
<li>所谓真正的自由，是在渴望自由的过程中也拥有了自由，疯狂的唱歌跳舞，也疯狂的爱着，我想逃脱被太多事情羁绊的自己。</li>
<li>如今我们深夜饮酒，被子碰在一起，都是梦破碎的声音。</li>
<li>自己的家，风能进，雨能进，国王不能进。</li>
<li>北方有佳人，绝世而独立，一顾倾人城，在顾倾人国，宁不知倾城与倾国，佳人在难得。</li>
<li>做了几碗面，为长者寿，为尊者福。</li>
<li>有的时候，女人只要勇敢一次就能获得一生的幸福，铃铛也是这么看的。</li>
<li>这就是大唐，热烈的像火，澎湃的如同巨浪，轻盈的和春风日立的一样，该快乐的时候我们不做作，该严肃的时候我们不轻浮，该勇猛的时候我们就像猛兽，该温和的时候我们就是退潮的浪花。</li>
<li>臭鱼找烂虾，</li>
<li>沙滩一趟三年半，今日浪打我翻身</li>
<li>士有三不斗，不与君子斗名，不与小人斗利，不与天地斗巧。</li>
<li>有了锤子，就看到什么都是钉子。</li>
<li>知我者春秋，罪我者春秋。</li>
<li>事情只要想明白了，抓紧就不难办？</li>
<li>我就是想要找出所有事情的最简单的，最本质的，最简单的，最通常的解决办法</li>
<li>位卑微敢忘国优。</li>
<li>中国的土地发生了这么深刻的变化，为什么总有人把建设的轰鸣声变成国家大厦的轰塌声，这非常奇怪，但是也非常正常。这就是中国，在变革开放的道路上，思想剧烈挣扎的中国。</li>
<li>今天左派和右派的共同点是过分的自信的倾向于否认历史经验同现实问题的关联，我们认为自己温故而知新，是从懂得许多旧日的答案不奏效，也许是真的，但是，历史真正能帮助我们懂得是，问题的复杂性，永远存在。</li>
<li>那是最美好的时代，那是最糟糕的时代，那是睿智的年月，那是蒙昧的年月，那是信息心百倍的年月，那是疑虑丛生的时期，那是阳光普照的季节，那是黑暗笼罩的季节，那是充满希望的春天，那是让人绝望的冬天。</li>
<li>我们拥有一切，我们一无所有，我们都在直奔天堂，我们都在直奔地狱，简而言之，那个时代和当今这个时代是如此的相似，以至于当时有些显赫一时的权威人士认为，无论对他是好是坏，一概只能用最高级的比较词语来评价他。</li>
<li>这样的天真绝不会，绝不会在以前或者以后。犹如改变自己，去经历。却一言不发，人们离开整洁的花园，千万场婚姻，维持了只是片刻，天真从此不再重视。</li>
<li>要么是公开的“辉煌怀旧”，要么是根据时机，逐步的，有选择的认可和回忆苦难。</li>
<li>除了非洲撒哈拉沙漠以南的地区世界山绝大数的人可以获得几乎无限的信息资料，然而，若没有一种超越少数精英而且始终存在的共同文化，那么，人们选择或遇到的是具体的问题信息和思想就取决于各种各样的趣味，倾向和利益。岁月流逝，我们每一个人都有会对这个快快的文化的同时代的人世界缺乏共同认识，更不必说我们看待先辈的世界。</li>
<li>知识分子似乎过于频繁的不知道他们在说些什么？尤其是在经济学领域或者是军事技术等领域。而敢于他们所说的责任，无论是左派还是右派，都极其不负责任的，默然的倾向于向鼓励在同自己相隔遥远的安全距离之外的地方使用暴力。错误的观念最终会流血，但在每一中情况下流的都是别人的血，这就是我们某些思想家对一切事情随心所欲说三道四。</li>
<li>任何一种行为都会增强一种言论，限制另一种言论。</li>
<li>关注仇恨言论和淫秽作品时，特定形式的言论是如何侵犯那些群体群体的自由言论的平等权利。</li>
<li>公共辩论的强化和弱化。</li>
<li>配给行为影响公共辩论，因此评判这些配给所需要的是某种用于区分有害于无害影响的标准。</li>
<li>媒体的目的是为了盈利。</li>
<li>市场只会提供给民众需要的东西，而不会提供给他们真正需要的东西。</li>
<li>我么不仅不懂得过去，这一点很不明显，而且我们的经验计算，政治实践，国际战略，甚至在教育的有限选择方面，也固执地坚持认为获取的没有什么意思，我们坚持认为我们的世界是一个新的世界，他的风险和机会都是前所未有的。</li>
<li>刚刚过去的历史总是最难认识的，最难理解的。</li>
<li>将欲全有，必反于无。</li>
<li>人，社会性，劳动性，兼相爱，交相利。</li>
<li>禅宗：外在超越—内在超越。</li>
<li>每个人都会觉得自己的人生匆忙，但是实际上每个人都由很多独自面对自己的时刻，暂时和外界没有太明显的联系，又不用为了生存资源而奋斗，突然就空出了一点时间，而这段时间就是行为人必须面对自己的时刻，关键是这段时间，大部分人不知道怎么用，然后就慌乱的面对这段时间，最明显的就是好像有很多的事情要去做但是又不知道去做什么?这就是过剩的烦恼，而游戏所扮演的，就是暂时缓解这种独自面对自己的焦灼的，并且游戏必须超越其他休闲娱乐部分所产生的愉悦价值，在那段时间，这种注意力的强度必须完全超越任何事情，还可能从专注衍生出特定的感情依赖。</li>
<li>革命党人对会党的态度：首先他们希望自己的革命导致社会的动荡，而且不喜欢和农民搞在一起，不论是义和团，还是太平天国，都没有给洋人留下好的印象。</li>
<li>随着社会的发展，一部分脱离土地的人汇聚到了新的专业，但是清政对这种变化没有很好地持客观的态度，只是一味地采取打丫的态度，这些会党的反抗性越高，那么和普通社会游离的越远。</li>
<li>车船店脚衙，无罪也该杀。</li>
<li>坚持不懈的向汪精卫的支持者解释一个道理，如果他们不学会做革命的雅各宾党人，他们将被人民和革命所埋葬。</li>
<li>夜幕已将，暴风雨来临，他们却在一间漏雨的房子里是徘徊不定的。</li>
<li>任何免费的东西都将会有其缺陷，无论什么东西，尤其是信息。</li>
<li>中国共产党自创始起便受到强有力的控制盒意识形态压制，他们的任何问题都将请示莫斯科。</li>
<li>1917年发表第一篇文章：1927年中国共产党必须有自己的军事力量才能玩这个游戏。</li>
<li>既然毛泽东已经多次的提到农民问题，那么为什么后来的过程中为什么国民党为什么没有重视农民问题，他们到底拿了农民的什么？</li>
<li>北伐即将胜利之时，却想着农民大众揭竿而起，惩罚胜利阶级，通话国民党，农民是真的，还是被代表？</li>
<li>外人提供武器，在结账的时候，共产党人想用一个虽说非法，但还简单的不还债的主意诱使贫农加入其中。</li>
<li>为什么</li>
<li>国民党人用极其空洞和自夸的言辞来掩饰他们全然无恙和无力满足农民要求的事实。</li>
<li>在中国不可能有资产阶级革命，所有反对外国统治运动都是由那些吃不饱饭的人来进行的，而非依靠资产阶级革命。好像是资产阶级的软弱性决定的</li>
<li>做最简答的一本通，把书上所有的知识点都通过大数据采集下来。</li>
<li>到底什么是假，大，空？</li>
<li>为什么总是一遍记不住，那是因为没有理解好，就是因为你没有真正的理解这个东西，天才—知道。</li>
<li>毛大度的接待了他，因为他已经丢了脸，因此没有了危险，即使他在从事党活动也没人追随他了。</li>
<li>敌人远比我们想象的更加强大和狡猾，部队疲惫，且吃不饱，领导人的军事经验相当缺乏，最后，我们没有办法成功的唤醒农民，使其觉悟，愿意做我军的屏障。</li>
<li>张学良：跑遍了全世界才找到了共产党。。</li>
<li>邓先圣，邓希贤，邓小平。</li>
<li>农民中无产者和无家可归者中还有巨大的革命潜力。</li>
<li>大多数的农民所做的是梦寐以求的减租和减税，而农村无业游民则企图瓜分别人的财产，他之所以提出彻底的重分土地的问题，可能只是为了满足一部分一无所有的贫民和最贫困的农民，他确信自己比农民更面白他们想要什么？</li>
<li>我们到底该不该牺牲小部分人的利益去换取大部分人的利益。</li>
<li>中国人的处世哲学认为，消灭对手不能证明对手是错的，而是要让他丢面子，如果您的敌人不愿意忍辱偷生，你就可以对他为所欲为，届时只有你才能决定是否恢复他的面子。</li>
<li>民国基础，抗日战争，国际形式，大城市任然拒绝共产党，</li>
<li>让一个城市人和一个农村人没差别是什么时候，自然是没有说话直接动手，甚至还比不过。</li>
<li>动员的力量：共产党人在宣传上非常有创造力，因此一旦控制了某个邮局，甚至信封上都会写上格言和口号。</li>
<li>我们今后农村斗争的真个战略就是毫无顾惜的杀戮大地主阶级和器走狗，用赤色恐怖手段威胁富农，使他们不敢帮助地主阶级，为了随时实施这一政策，专门成立了最勇敢的工农分子组成赤杀队，其任务是对村庄进行游击式的夜袭。</li>
<li>1925年-1927年革命的基本理念已经实现，全国统一的局面已经形成，统一后的中国在政治上和经济上仍然处于列强的以赴地位，一系列的不平等条约仍然没有废除。</li>
<li>水浒传：突然攻击一个薄弱的地方，然后抢劫一番，最后退回到安全的地方来避难。</li>
<li>是你的敌人成就了你？</li>
<li>土生土长游击干部。莫斯科的干部，国际共产的同志。</li>
<li>中华苏维埃正式对日宣战，这个行动纯粹是走形式，但是他在政治上意义很大，毛认为，通过宣传和鼓动，大胆利用，民众的反日情绪，中共就可以在众多的中国爱国者中成为一股真正的名族主义力量。</li>
<li>可以实现一种自动对话的东西，让APP自动读取你的信息，在别人发信息的时候或者你自己不方便的时候自动应答，转接。</li>
<li>你正在阅读的书会告诉你的感新区的章节是那些，而你面前的书架会告诉你展示的书和你手里的书相近内容的书籍，与此同时，你注视祖母的照片的时候，他会告诉你祖母最近的近况。</li>
<li>我所想到的和我能做到的差太多了。</li>
<li>产品开发思路：最快，压缩，转换。</li>
<li>可不可以按照育人的方式来发展机器，就是假设这个机器没有眼睛该怎样找东西，然后再给他加上。</li>
<li>人类最大的智能不是在工作的时候的工作方式，而是在不工作的时候进行的活动。那不就是灵感来的时候么？</li>
<li>最是一池春皱处，西湖边上依人家</li>
<li>物理层协议-数据链路层-网络层协议-传输层协议-应用层协议。</li>
<li>这就是中国政治的一大难题：每当政治者想按照民主的方式办事的时候，这套东西就是玩不转，但是用传统的东西的时候又会变得很灵，你让他怎么选择？</li>
<li>需不需要效忠，像谁效忠，怎么从忠于皇帝转变成忠于国家，忠于国家了，袁世凯部不高兴了，可否使民众对国家的效忠转变成对袁世凯的个人效忠，以强化总统的权威。老百姓们分不清为什么没有皇帝了，皇帝和总统有什么不一样，来百姓是这样，军头是这样，官僚是这样、</li>
<li>21条中最重要的是5号条约，那个只是日本政府建议的条约，但是被大使馆改成了必须签订的条约，其实这么做只是先提一个比较重要的条件，在提一个比较简单的条件来缓冲，但是最重要的目的是摧毁袁世凯的权威和声望大跌。</li>
<li>你可以购买自己的身份，虚拟化的形象的研究揭示了人们趋向于创建理性化身的身份，比现实自己的身份更加年亲，强壮，酷，懒惰邋遢的女人可以变成辣妹，书呆子可以变成帅哥猛男。</li>
<li>网络空间和天国之门。</li>
<li>人类自文明开化以来，想出名的强迫性冲动就一直促使着人们追求庄严和伟大，在古代，名望和荣誉是关联在一起的，因此，世上万物飞逝的拉丁格言提醒那罗马将军：荣誉是短暂的，从而要学会享受荣耀的短暂时刻。</li>
<li>明星：有人利用他们赚钱。</li>
<li>工业上的大量生产不但在改变艺术成名的方式，也在改变着艺术本身的本质。</li>
<li>虽然人们最信任的是朋友和家庭成员，但是他们也会对那些消费者评论赋予很高的权重，哪怕那些人是自己从未认识的人。</li>
<li>即使为消极评论提供一个论坛时，员工博客也可以提高公司的声誉，并推进士气，因为开放式的对话增强了可信性，并吸引人们进行更为积极的内容发布。</li>
<li>信息和只是的传播授予人们向根深蒂固的传统惯例和权威挑战，甚至最后将其颠覆的权利。</li>
<li>权利是通过强迫他人做一些自己不喜欢的事情，来达到当全权者希望实现的目标。</li>
<li>集体行动的逻辑</li>
<li>理性的人需要一个诱因才会参与到集体活动中去，我们必须挖掘出什么样的诱因才会刺激那些人参与合作或协作。</li>
<li>相互理解，协作并不是建立在战壕里的厮杀中，相互合作，共同生存永胜于相互毁灭和灭亡。相互牵制的协作交易实际上已近改变了相互牵制的本质，使人们更加倾向于注意对方的行为了。</li>
<li>在痛苦的征地战中；自己活着，让别人也活着，有一对于互利性的合作也不是必须的了，有些情况合作可以在对手中进行。</li>
<li>当市场逻辑被扩展到物质商品以外的领域时，他就必然要进行道德买卖，除非他想在不考虑他所满足的那些偏好的倒得所价值得情况下盲目的使社会利益最大化。</li>
<li>那些研究强调了内在动机和其他有形酬劳的关系，当人们从事一项他们认为具有内在兴趣与外在价值的活动中去，给他们金钱的这种做法可能会贬低这种他们内在兴趣或承诺而弱化他们的动机。</li>
<li>建立一个云空间，记录你的一切。</li>
<li>web数据挖掘可视化的研究。</li>
<li>如果需要，人们经常被要求牺牲他们的生命来获取某些价值和理想，生命的价值是什么？</li>
<li>能够认识的人的心灵是什么？</li>
<li>我们只能认知纯粹的感觉经验事实，还是能偶超越于感官所揭示的东西，</li>
<li>有价值的知识是否只能被定义为能用于谋生的知识，</li>
<li>每个人都需要一种哲学么？我们真的有选择拥有一种生活哲学么？</li>
<li>娱乐至死</li>
<li>我退休以后的愿望就是骑着自行车，到每一个城市，数房子，把中国有多少房子数的清清楚楚，我相信，我一定能够数清楚，因为，我们的一些统计学家连中国存多少老母猪都可以数清楚，房子嘛，起码不会跑来跑去，是可以数的清楚额。</li>
<li>让有钱人觉得安全，让穷人觉得有希望。</li>
<li>春秋的文化思想，宋的经济，唐的胸怀，明的体制，晋的风雅，清的疆域，民的胸怀。</li>
<li>人们会爱上那些压迫崇拜那些让他们失去思考能力的工业技术。</li>
<li>我们无法知道谁能胜任州长或总统，但是我们知道谁的形象最能排除和安抚我们心中的不满。</li>
<li>古希腊时期，人们按照自己希望的形象去塑造上帝，现在，相当上帝的人，按照人们希望的形象在电视上扮演。</li>
<li>对于一个因大笑过渡而体力衰竭的文化我们能有什么良知。</li>
<li>人们对名誉的热衷，实际上是他们进行所有计划和事业的伟大目标。</li>
<li>书本里的世界和电视机的生活。</li>
<li>在人类历史上，人们第一次面对信息过剩的问题，与此同时意味着人们将面对丧失社会和政治生活的能力。</li>
<li>爱国主义是无赖最后的避难所，爱国主义精神</li>
<li>人们的天性就是喜欢采摘低垂的果实，贪图便宜，总是挑容易的去做，把向上爬的事一定要有压力才做，上世纪的美国，受益于低廉的土地资源，成千上万的收到教育的人口比例，买入了高速发展，但因为忙于收获第一批容易到手的果实，疲于开阔新的果园，那是低垂的果实早已消失，但是我们假装他还在那块，我们没有意识到我们是在科技的高原上，而树枝已然光秃，这就是我们为什么觉得自己不对劲。</li>
<li>生产这个问题越来越接近人的精神问题。</li>
<li>知识分子似乎已经过于频繁的表明不知道他们在谈论什么了，尤其是在经济学领域，错误的观点最终会流血，但是每种情况下都是留的别人的血。</li>
<li>在这个庄园里，每一个动物园都必须遵循，却发现猪才能看懂。</li>
<li>所以能都希望平等，但是总有的人必须更加平等。</li>
<li>部落偶像，洞穴偶像，剧场偶像。</li>
<li>市场给我们需要的东西，但是不会给我们真正需要的东西。</li>
<li>党外无党，帝王思想，党外无派，千奇百怪。</li>
<li>市场必胜论在道德上的缺陷总是贪婪，因为贪婪让人们进行不负责任的冒险，贪婪在金融危机中扮演者重要的角色，更重要的是变化的最致命的不是贪婪的疯长，而是市场和价值观侵入了那些本不属于他们的生活领域。</li>
<li>一切都待价而沽，在所有的美好的东西都可以买卖，市场不仅仅在分配商品，而且还在分配价值观，在表达和传播人们针对交易上你的态度。</li>
<li>何必想那么远呢？从长远来看？我们都是要死的？</li>
<li>当我们看到现在的繁荣，那些无法看到的东西是看不见得，每次看到房子里面住的人，我们都需要加倍的想像才能想到那些没有看到的财富，他们忘记了此类操作对早造成的影响，不能被看到，就可以避而不谈。</li>
<li>古代一个人会因为一个人带来的的坏消息而把它处死，但是现在节目会以另一种奇怪的方式恢复这种传统么？电视为真实性来了新的定义：那就是演员表现出来的真诚或是吸引力，如果在电视上，可信度代表了事实而成为检测讲述是否可信的决定性因素的话，那我们的政治领导人不必关心时间的真相了，因为他只要努力让自己表演达到最佳的逼真感就可以了，那就是说，有的人是看上去撒了谎，按月说的是实话，有的人看上去像是实话，却说得是假话。</li>
<li>独自打打保龄球。</li>
<li>如果你开着车，远处全是雾，刹车坏了，为了防止开过头，最好的就是慢慢开，即使是一位很高明的车手，也无法确保在下一个信号灯来临之前及时作出反应。</li>
<li>所有的一切价值都是以人为基础来思考的。</li>
<li>中国对世界来说意味着什么？</li>
<li>民间资本不是投向了实业，而是去炒房了。</li>
<li>美国人为了自由和民主而战斗，我们中国人为了什么？</li>
<li>不要问国家为你做了什么？也不要问国民为国家做了什么？而是要问我们每一个人通过国家自己做了什么，而最终的目的是为了保卫我们的自由，除了我们各自努力并认同的目标之外，我们不承认国家自己的目标。</li>
<li>我相信太阳已经升起来，不仅是因为我亲眼看到了太阳，更是因为我借着他的光芒，我看到了所有其他的事物。</li>
<li>侦探小说迎合了一部分人想要看出彼此毫无关联的各种事务中看到意义的渴望。尽管这些事情有些纷繁复杂，但在他么之间自由这一种线索，这些线索说明事情背后的意义的记录帮助我们找到那些神秘现象的答案，而所有的这些线索只有在更大的背景中才能发现。</li>
<li>如流星雨般的事实从天而降，然而，这些事实确未曾经受过质疑，他们就像需要编制的美丽挂毯的缕缕丝线，真相的揭示需要将这些连接起来，各种信息时刻冲击。</li>
<li>你绝不可能通过诉控你的消费者来赢的自己在商界的地位。</li>
<li>让反革命的狼子野心多暴露一会又何妨？</li>
<li>国家前途这四个字分量太重了，每个人都必须自己掂量一下，绝不是某个上级领导一句话的就可以随便定论的。</li>
<li>独自自己思索的时候，常会感到恐惧和痛苦，畏惧面对虚无和死亡。“他人”要么是漠不关心的陌生人，要不就是想要占有和统治的敌人，“他人”才是地狱。</li>
<li>当年轻人步入成年人行列，他们不得不生活在现实中，而很多事情都是社交网络无法抹去的，这些都是遗留在我们显示生活中并伴随着我们一生的事情，我们甚至有理由来怀疑世界，社会互动的真实性，当我们维持网络朋友的的力量进行自我肯定方式的时候，我们不得不质疑日益月累成千上百的朋友是否真的是一种构成社会真实社交网络的可信方式。</li>
<li>我们独自一人感到恐惧和痛苦，畏惧与虚无和死亡，他人要么是漠不关心的陌生人，要么是想要占有和统治的的人，他人才是地狱。</li>
<li>在社交网络中，熟知并不导致藐视，反而会加强合作，尤其是当我们相信我们将会和一个人继续保持互动的时候。阿克赛尔把这种现象称为未来的影子。</li>
<li>群体协作的重要性—维基百科</li>
<li>反思的人视图克服世界的破碎，从无意义到有意义的层次。我们需要从这样一个认识开始，即我们处在一种具体的情境中，基于一个身体上，沉浸在物质和历史的进程中，他说，我们的身体并不属于我们，我并非不依赖他，但我并不只是一个身体，通过这个身体，我在世界发挥作用，并与周围的世界持续不断的感触中。</li>
<li>首先有人，然后碰上自己。</li>
<li>我们的境遇也许看起来毫无意义，但是我们依然可以依靠正直，高贵和英勇的规则来生活并且创造一个人类共同体，因为我们的命运在自身之中，我们希望就是去选择与行动，从而能够活下去。</li>
<li>没有人限制你不可以做这件事。</li>
<li>主动沟通，表达自己的想法和善意。</li>
<li>主流文化体系和人们在这种文化下的渴望。</li>
<li>美国文化最伟大之在于他开创了最富有的人和最平穷的人在本质上购买一样东西的传统，你看电视，看见可乐，而且你知道总统也喝可乐，谁都喝可乐，然后你想一想，你也喝可乐，可乐就是可乐，再多的钱也买不到更好的可乐，所有的可乐都一样，而且 都和好，谁都知道这一点，总统知道这一点，乞丐知道这一点，而你也知道这一点。</li>
<li>20年代史无前例的帅气，30年代的妖娆，40年代战争的烙印，50年代绝对的优雅，60年代疯狂的迷你和嬉皮，70年代的朋克风格，80年代的女权的强势。</li>
<li>事件必须在时间和空间中发生点什么？</li>
<li>如果决定物质的规律早已安排了明天由烟斗，烟草，以及我嘴唇相连的烟组成，今夜我挣扎是否戒烟还有设么意义？</li>
<li>当一个人运用苏格拉底的方法论之后，他就会善于发现错误的想法，也学会认识自己的无知。</li>
<li>当别人的哲学看不懂，就要去寻找自己的哲学。</li>
<li>西方哲学有了科学，那么东方哲学有了什么？</li>
<li>执着这种源自于自我意识的贪婪或欲望的极端形式，倘若有人想要达到这种安详宁静的状态，就必须打破这种执着，执着的形态有很多种，执着于身体和来自外部世界的快感，执着于某些观点，执着于某些教条和仪式，执着于自我信念，摒弃执着，这是必要的，而这样一来，执着于不执著也被摒弃掉了，而另一种就是寂寞，身体的寂寞，精神的寂寞，言语的寂寞。</li>
<li>我们心灵所想到的，仅仅是由感官提到的，当事务不以我们的感觉所呈现，世界又会使什么样的。</li>
<li>甚至于他们不自觉的应用辩证法的思维方式思考，提出自相矛盾的观点，发现这个，就开始进入无线循环的，解决一些反而是或又不是的存在于原先书上的问题。</li>
<li>先论证最容易接受的内容，论证过程是对立双方的对话，很多哲学家都相信，通过这种过程的对话，会话中每个人都不得不澄清自己的看法，最终结果是清晰的陈述每个想说的东西，重要的是，辩证法是思想通过观念的相互影响来发展的。</li>
<li>实践哲学：内圣外王。</li>
<li>内省蕴含着这样一个谬论–人能把自己分成里两个部分，一部分做推理，一部分观察第一部分的推理。</li>
<li>当我们任何一个人把自己所能描述出来的自己的特征去掉，那么剩下的自己是什么？</li>
<li>我们可以接受疾病原因不明，但是不能接受没有原因的疾病。</li>
<li>如果我们认为自己是自由的，仅仅是自己不知道行动的原因对么？</li>
<li>法庭的大部分努力都是在明确罪责的程度，那就是被告的行为在多大程度上是故意的。</li>
<li>对更有想法的希腊人来说，这些神还有待改进之处。</li>
<li>下士闻道，大而笑之，不笑，不足以为道。</li>
<li>一个人前进的极限是相对于他的主观感觉和客观环境不符合而存在的。</li>
<li>娇，是人类到了极限界限的标志，娇，是人类应该避免的第一件事。</li>
<li>不知常，妄做。想要的到东西，就要从他的反面开始，想要保持什么东西，就必须在里面容纳一些与他相反的东西。谁想要变强，就是在感觉到自己很弱的时候才开始的。</li>
<li>无知的人 不仅在各方面受到外面各种原因的干扰，从未享受过真正的和平，而且过着对上帝，外界事物一概无知的生活，活着也是受苦，一旦不在受苦也就不存在了。另一方面，有知的人，在他有知的范围里，简直可以不动心，而且由于理解他自己，上帝，万物都有一定的永恒和必然性，他也就永远存在。永远是享受灵魂的和平。这样，圣人对于万物自然本性的理解，他的心就不收世界万物的影响。用这种方法，他就不依赖世界外物，因而他的幸福也就不受外界事物的限制，他可以说是已经得到了绝对的幸福，这里是道家思想的一个方向。</li>
<li>民意是需要驯化的，人们只会去注意事物那些被引导的是别的方向。</li>
<li>个人总是不断评论自己以及他们同伴的行为。</li>
<li>我们所处的社会群体，其行为，情感和思维都由明确的方式，我们意识到自己和周围的世界，通过逐步扩宽的经验范围熟悉了其他人和事物，我们不断显现的意识包括触觉，视觉，听觉，客体和声音通过联想特意训练在一起，我们因此形成语调并学会事物的名称，随着我们掌握一门语言，词语被组成句子，我们意识中的事件是纯然私密的，没有人知道我们的感觉，但是我们却认为别人的经验与我们的是相似的。</li>
<li>部落偶像：我们倾向于承认对自己一方或是群体有力的证据，洞穴偶像：我们容易把自己看成世界的中心，强调自己的一孔之见。</li>
<li>市场偶像：我们容易被日常言语中的熟悉的-词语或是名称影响。</li>
<li>剧场偶像：源于我们对党派，信条和狂热崇拜的依附，这些狂热，时尚和思想派别如同话剧场版的上演，将我们引入虚拟的世界，剧场偶像使我们的出偏颇的结论。 </li>
<li>他强调的是生命，本能和力量，尼采认为这些都被一种迎合大众的文化给败坏了，他将“权力意志”看作是基本的人类动机。他想给“更高的人让路”，这些人体现了更高的价值，而不是表现在基督教，民主和19世纪资产阶级道德中的平庸美德。</li>
<li>尼采要我们用什么来取代正在消失的传统呢？他的正面建议和他的攻击一样不清晰，他认为应该“重新估计一切价值”但是重估价值并不是指创造一套新的道德，价值，它主要是指以诚实和准确之名对目前所接受的价值宣战，统治意志是人类的一种根本的驱动力，最终那些驱动力，会创造一种主人道德以及寥寥无几的非凡人物。</li>
<li>有个聋子看到别人放鞭炮就会很奇怪，好好地一个花纸卷，怎么说炸就炸了，这就告诉我们一个道理，当你有一个感官通道被关闭以后，不管你多么女里的去观察世界，你都不会有办法去了解这个世界的。</li>
<li>罗马帝国凯撒大帝死亡之后：分裂的根本原因是疆域扩张带来的罗马和其他人的矛盾，将于扩张带来的贫富分化，小国家扩张之后带来的和原有制度的不配套。</li>
<li>什么叫政治，古往今来的时候和核心问题就一个，按规矩来的时候博弈，一定会有一部分人胜出，这叫富人，可是富人胜出之后，永远占少数。穷人永远占多数，于是穷人就要和富人谈判。穷人会说，把钱叫出来，不然弄死你？因为我们人多？好的政治就是既不让大家撕破脸皮，又能让大家按规矩来博弈。与之同时，还能让富人心甘情愿的把钱叫出来。让穷人不至于走投无路。</li>
<li>中国其实缺少好的左派和右派。双方能狗按照共同认定的游戏规则来开展博弈，别动不动就掀桌子，动不动就打翻狗食盘，让大家都吃不成，只有大家都坐在一起，按照既定的规则商量着来，是要更多的福利还是更多的自由，最后达成一个妥协，也叫共同底线，这样才会诞生国家的长治久安。</li>
<li>吴大维做的第一件事就是告诉大家，要玩就支起桌子好好玩，别动不动就掀桌子。第二步是告诉大家玩什么？以前是谁有钱，谁有权，谁有拳头就赢，赢家通吃，现在是这么晚，咱们打麻将，我打一张，你才能吃一张，我吃一张，我的打一张。有进有退，好商好量，只有大家都觉得合适才能玩的下去。最后谁胡牌呢？慢慢凑，咱们不着急。定规则：走四川麻将还是北京麻将，第四搞氛围：大家蓉蓉恰恰，和气一堂。第五，等你们把所有的高帽子给我戴上，等大家都愿意来我这打麻将的时候，对不起，我要坐庄了。</li>
<li>替如夫人洗脚，赐同进士出身。</li>
<li>你要是在自己坚持自己那条道德原则，所有人都不会待见你，都会在自己份内给你难看。</li>
<li>等到曾国藩第二次出来的时候，已经学会了柔术，他不会直接拒绝，而是学会和皇上周旋了。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;每一个人都会觉得自己人生匆匆忙忙，但实际上每个人都会有很多自己独自面对自己的时刻，暂时和外界没有太明显的联系，又不用因为生存资源做努力，突然就空出了一点时间，而这段时间就死行为人必需面对自己的时刻，关于这段时间，大部分人不知道怎么做，然后慌乱的应对这段时间。最明
    
    </summary>
    
      <category term="Read" scheme="https://github.com/skoll1/libateer.github.io/categories/Read/"/>
    
    
      <category term="罗辑思维" scheme="https://github.com/skoll1/libateer.github.io/tags/%E7%BD%97%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>数组-2</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/08/best-1-7/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/08/best-1-7/</id>
    <published>2017-03-07T16:09:39.000Z</published>
    <updated>2017-03-07T16:10:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>1:在寻找的时候，字符串的索引可以不是数字，只要是符合一定的规范，并可以转换为数字就可以的。（索引前面不可以加多于的0）<br>2：属性length的最大功能是追踪数组的最大索引。他不会计算元素的个数。必须自己写函数。<br>3：基本常识：把数组的长度设为0可以把数组变为空，这样可以清空数组，但是这个办法是很慢的，因为每个数组都是显示的删除。而且这个会影响共享此数组的对象。相比之下，把数字赋值为空则不会影响他。<br>4：稀疏数组和密集数组。密集数组是连续的，在相同的索引处，空缺和undefined元素很相似。两个数组都有相同的长度。但是当用  in 索引的时候，完全不同。[,,2][undefined,unfined,2];两个for循环的结果都相同。forEach()循环会跳过空缺，而不会跳过undefined.<br>5:忽略空缺的操作：forEach(),every(),map()虽然会跳过，但是会保留空缺。filter()去除了空缺。join()会把空缺，undefined,null转为空字符串。sort()在排序时保留空缺。<br>6：移除数组中的空缺：filter（）函数。自定义函数。arr.filter(function(x){return true});2:function lose(arr){var result=[];for(var i=0;i<arr.length;i++){result[i]=arr[i];}return result;};把空缺转为undefined.怎么把undefied变没呢？="" 7:array.isarray(arr);函数用来检查是否是一个数组。。="" 8：数组原型方法：破坏性。会改变数组。="" shift().unshift()。pop().push().splice();resver(),sort().在对数字排序的时候不能用原来的方法了，那样会导致值溢出。="" 9：function="" ok(a,b){return="" a<b?-1:(a="">b?1:0)};<br>10:好烦啊，数组里面包对象，而且还要比较对象的字符串和对象名字的大小。<br>11：非破坏性的（直接改造成一个新的数组）：concat(),slice()变成新数组，运原来的还在了,join()变成字符串了把这个。。<br>12：数组的迭代：给数组的每一个元素做多次的相同运算。使值根接近真值。<br>13：数组的遍历：通过某种方法：不论是头到尾还是hash算法，把数组的所有值都访问一遍。<br>14：迭代方法正式开始：var str=[1,2,3,4,5];<br>str.forEach(function(item,index){console.log(item’’+’’index)});1,2,3,4,5让数组中的每一项都做一件事。<br>15：var newstr=str.map(function(item,index){return item*2})让数组通过某种计算产生一个新数组。<br>16：var newstr=str.filter(function(item,index){return item&gt;3});<br>17:var newStr=str.reduce(function(prev,next){return prev+next;});让数组内的前项和后一项做某种计算，并累计最终值。<br>18:var result=str.every(function(item,index){return item&gt;0;});检测这些值是否符合某种规则：true.(全部)<br>19:对比some()一些符合这个条件就可以。</arr.length;i++){result[i]=arr[i];}return></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1:在寻找的时候，字符串的索引可以不是数字，只要是符合一定的规范，并可以转换为数字就可以的。（索引前面不可以加多于的0）&lt;br&gt;2：属性length的最大功能是追踪数组的最大索引。他不会计算元素的个数。必须自己写函数。&lt;br&gt;3：基本常识：把数组的长度设为0可以把数组变为空
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>array</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-8/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-8/</id>
    <published>2017-03-07T12:35:16.000Z</published>
    <updated>2017-03-07T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：首先最基本的数组方法。push,pop,shift,unshift.</p>
<p>2:splice()最终返回的都是当前操作的数组，具体操作后的结果要看读取原来的字符串。</p>
<p>3：splice(num,num,”n1”,”n1”).如左所示，可以增加，删除，替换字符串。第一个数是开始的位置，第二个数是向后操作几个数，第三个是要换的数组。</p>
<p>4：slice(num1,num2)是用来从已有的数组或字符串中提取返回特定的元素的。他是不会改变原来的字符串。</p>
<p>5：分号使用的原则：缺少的分号会有分号自动插入机制，但是者不可靠。规则是以块结束的语句不要分号。</p>
<p>6：在调用数字变量的方法时，区分浮点数的点号还是调用方法的点运算符很重要。1..toString().</p>
<p>7:严格模式：为了让js书写变得更加好。</p>
<p>8：sort函数：主要用来对数组排序，默认情况下是将数组元素转变成字符串，按照那个编码比较，包括数字也是这样比的。还是只比较第一个数字。。如果想要实现自己的自定义排序，就要在sort()里面加自定义函数。</p>
<p>9：数组的话还得看那些forEach().Map().filter()</p>
<p>10:对象的比较不是值得比较，即使两个对象包含相同的属性，他们也不相同。</p>
<p>12:在Vue中检测数组更新，包括变异方法：pop，unshift. splice(),sort(),reverse()</p>
<p>非变异方法：这些方法是不会返回原数组的，而是会加载一个新的数组。</p>
<p>11：一些字符串方法。</p>
<p>12：window.onload=function(){</p>
<p>单向数据绑定的方法。。<br>var text=document.getElementById(‘text’);</p>
<p>var lines=text.value.split(“\n”);</p>
<p>var result=”</p>
<p>“;</p>
<p>for(var i=0;i</p>
<p>result+=lines[i];</p>
<p>}</p>
<p>result+=””;</p>
<p>var div=document.getElementById(‘div’);</p>
<p>div.innerHTML=result;</p>
<p>// setInterval(function(){</p>
<p>//     div.innerHTML=”sdfsdfsd”;</p>
<p>// },1000);</p>
<p>}</p>
<p>12:数组是从索引0开始的自然数到任意值的印射。这些值是成为数组的元素。</p>
<p>13：数组可以在作为索引到值得印射，换句话来说，数组可能不是连续的，中间可以有空缺。</p>
<p>14：其中没有定义的是undefined.绝大数的js引擎都会自动去重，并连续保存元素。</p>
<p>15:数组也可有对象，并且可以拥有对象的属性。但是并不认为那些属性是实际数组的一部分。</p>
<p>16：多维数组的操作：var rows=[];for(var rowCount=0;rowCount&lt;5;rowCount++){rows[rowCount]=[];for(var colCount=0;colCount&lt;5;colCount++){rows[rowCount][colCount]=’.’}};rows[0][2]=’x’;rows.forEach(function(row){console.log(row.join(‘’))})当矩阵较小的且纬度固定，可以通过数组字面量来创建。<br>17：多维数组怎么创建？var infos =</p>
<p>[</p>
<p>[‘小A’,’女’,21,’大一’],</p>
<p>[‘小B’,’男’,23,’大三’],</p>
<p>[‘小C’,’男’,24,’大四’],</p>
<p>[‘小D’,’女’,21,’大一’],</p>
<p>[‘小E’,’女’,22,’大四’],</p>
<p>[‘小F’,’男’,21,’大一’],</p>
<p>[‘小G’,’女’,22,’大二’],</p>
<p>[‘小H’,’女’,20,’大三’],</p>
<p>[‘小I’,’女’,20,’大一’],</p>
<p>[‘小J’,’男’,20,’大三’]</p>
<p>];var arr=[];</p>
<p>var n=0;<br>for(var i=0;i&lt;infos.length;i++){</p>
<p>if(infos[I][3]==”大一”){arr[n]=infos[i];console.log(arr[n])}</p>
<p>}</p>
<p>n++;</p>
<p>}</p>
<p>18：另一种初始化的方法：var tArray = new Array();  </p>
<p>for(var k=0;k&lt;p;K++){</p>
<p>tArray[k]=new Array(){</p>
<p>for(var j=0;j&lt;p;j++){</p>
<p>tArray[k][j]=””;<br>}</p>
<p>}</p>
<p>}然后在下面赋值。。。<br>19：数组索引之外的索引被视为普通的属性值。他们不会作为数组元素呈现，也不会影响length的属性。</p>
<p>20：in 操作符用来查看数组中是否有这个索引的值，这有必要么？还有别的用么？</p>
<p>21：delete不仅可以删除对象，还可以删除数组内的元素，这个删除不会产生空缺。不会更新length.</p>
<p>22:</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：首先最基本的数组方法。push,pop,shift,unshift.&lt;/p&gt;
&lt;p&gt;2:splice()最终返回的都是当前操作的数组，具体操作后的结果要看读取原来的字符串。&lt;/p&gt;
&lt;p&gt;3：splice(num,num,”n1”,”n1”).如左所示，可以增加，删除，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-6/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-6/</id>
    <published>2017-03-07T09:54:30.000Z</published>
    <updated>2017-03-07T10:23:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：js的数字只有一种类型，他把所有的数字都成为浮点型数字。但是他会在内部做优化并且区分浮点数字和整数，但是程序员都看不到。—所以一个数字字面量可以使整型，也可以是浮点型，或者16进制。</p>
<p>2：123 ..toString() 把数字转为字符的时候要注意浮点和转化方法用的那个点的区别。</p>
<p>3:number(undefiend) number(‘undefined’);–NaN;将任意值转换为数字常用的方法。+value;</p>
<p>4:number(‘’)–0,</p>
<p>5:parseFloat()只转字符串类型的数字就可以了，因为他的原理是先把里面的东西转为字符串，这样就会的出我们不想要的东西。通常nmunber是更好的选择。</p>
<p>6：</p>
<p>7：在js中，所有的数字都是浮点数，整数是没有小数点的浮点数。讲一个数字转换成整数意味着找到最近的与他接近的整数。</p>
<p>8：方法-：math.ceil()math.round().Math.floor(). 方法2：Tointeger()函数chrome报错了 方法3：位运算符 方法4：parseInt();函数。该函数会尽可能的忽略前面的空白并且尽可能多的查找数字转换。</p>
<p>9：不要使用parseInt（）转换数字为整型，因为他会先强制的转为字符串的。他只是适用于解析字符串非常有用，也是一旦遇到非法字符就会停止解析。</p>
<p>10:number % number 求余数：他不是取模，因为他会返回与第一个操作数字符号相同的值。而取模会返回与第二个数字符号相同的值。</p>
<p>11：parseFloat:将str转换为一个浮点数。parseInt（）也是这样。他们操作的目标都是str.</p>
<p>12:number的构造器属性，number原型方法。</p>
<p>13：number.MAX_SAFE_INTEGER  NUMBER.MAX_VALUE </p>
<p>parseFloat(true)==parseFloat(‘true’)–NaN</p>
<p>parseFloat(null)–NaN</p>
<p>parseFloat（）会一直解析到最后一个字符的。也有可能导致错误。</p>
<p>var str=”123 3#”;–Number(str)-NaN, parseFloat(str)–123  忽略开头的空格，并且在非法字符之前停止（本例是空格）。但是number（）会忽略开头和结尾的空格，但是任何非法的字符都会导致他返回NaN；本例也是空格。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：js的数字只有一种类型，他把所有的数字都成为浮点型数字。但是他会在内部做优化并且区分浮点数字和整数，但是程序员都看不到。—所以一个数字字面量可以使整型，也可以是浮点型，或者16进制。&lt;/p&gt;
&lt;p&gt;2：123 ..toString() 把数字转为字符的时候要注意浮点和转
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-5/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-5/</id>
    <published>2017-03-07T09:53:19.000Z</published>
    <updated>2017-03-07T10:23:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：闭包：一个函数外加上该函数所创建时所建立的作用域。闭包的名字来源于闭包“关闭”一个函数中自由变量的访问的权利。我们所说的变量是自由的，是指该变量定义在函数外部的，而非函数内部。这个不懂。。。。如果一个函数访问了它的外部变量，那么它就是一个闭包。<br>2：function create(start){return function(step){start+=step;return start;}};var inc=create(5)(1);<br>3：闭包是一个代码执行完成后离开作用域环境依然存在的例子。这个懂。。<br>4：for(var i=0;i&lt;5;i++){ (function(){return function(){return i;}result.push(i)}())};不成功的闭包。<br>5:var result=[];<br>        for(var i=0;i&lt;5;i++){<br>            (function(){<br>                var func=function(){<br>                    return i;<br>                };<br>                result.push(func)<br>            }());<br>        }二改，还是出来的函数。返回的数组<br>6：var result=[];<br>        for(var i=0;i&lt;5;i++){<br>            (function(){<br>                var pos=i;<br>                var func=function(){<br>                    return pos;<br>                };<br>                result.push(func)<br>            }());<br>        }三改，<br>7：函数变量可以保存在函数的作用域内，因此看起来就好像是函数将变量包起来了。包含变量的函数就是闭包。—有权访问另一个函数作用域内变量的函数就是闭包。<br>8：函数声明和函数表达式。给一个函数加上括号就把他从一个声明变成了表达式。可以直接调用。<br>9：闭包的三个条件：访问所在的作用域，函数嵌套，在所在作用域外被调用。<br>10：初级阶段：function f(value){var b=value;return function(){return b;}};f(‘libateer’)();<br>11：高级一点：var n;function f(){var b=1123;n=function(){return b;}};n();<br>12: 在高级一点：function show(first,last){var name=”hello”;function make(){return name+first+””+last}return make()};show(“lilei”,”wanggua”);<br>13：在高级一点：(function (first,last){var name=”hello”;function make(){return name+first+””+last}return make()})(str,str);<br>14:for(var i=0;i&lt;7;i++){(function (first,last){var name=”hello”;function make(){return name+first+””+last}return make()})(i-100,i+100);}和上面那个差不多了吧。。<br>15:在在高级一点：function hello(){var name=999;return {get:function(){return name;},set:function(id){name=id;}}}var f1=hello();f1.set(‘lailai’);f1.get();<br>16:找到那个怎么搞的了？function f(){var a=[];for(var i=0;i&lt;4;i++){a[i]=function(){return i;}}return a;};var a=f();和原来出的一样现在f()函数出来的还是函数，所以要这样a<a href="">1</a>;我要取到他的函数，在把这个函数表达出来。但是现在他的值还是4.是最后的，所以要在那里吧那个替换了。var pos=i；来个这个东西。<br>17:闭包的经常用法：var db = (function() {<br>// 创建一个隐藏的object, 这个object持有一些数据<br>// 从外部是不能访问这个object的<br>var data = {};<br>// 创建一个函数, 这个函数提供一些访问data的数据的方法<br>return function(key, val) {<br>    if (val === undefined) { return data[key] } // get<br>    else { return data[key] = val } // set<br>    }<br>// 我们可以调用这个匿名方法<br>// 返回这个内部函数，它是一个闭包<br>})();</p>
<p>db(‘x’); // 返回 undefined<br>db(‘x’, 1); // 设置data[‘x’]为1<br>db(‘x’); // 返回 1<br>// 我们不可能访问data这个object本身<br>// 但是我们可以设置它的成员<br>17：函数的参数和变量不会被垃圾回收机制所回收，因为他是一只被另一个函数所引用的。<br>18：闭包的好处：希望一个变量长期的驻扎到里面，避免全局变量的污染。<br>19：回到初级：function aaa(){var a=1;return function(){a++;console.log(a)}};var b=aaa()不论是这种形式，还是下面的function aaa(){var a=1;var a=function(){a++;console.log(a)};return a;};一开始都要这样：先把原函数取出来。<br>20：var a=(function(){var a=1;return function(){a++;console.log(a)}})();有那么点意思了，a();执行时变成了这样。、<br>21：用法：模块化代码，私有成员方法的存在。<br>22:var a=(function(){<br>            var a=1;<br>            function a1(){<br>                a++;<br>                console.log(a);<br>            }<br>            function a2(){<br>                a+=3;<br>                console.log(a+100);<br>            }<br>            return {<br>                a1:a1,<br>                a2:a2<br>            }<br>        })()我让他私有了。。a.a1();<br>23：又来了：window.onload=function(){<br>            var Oli=document.getElementsByTagName(‘li’);<br>            for(var i=0;i&lt;Oli.length;i++){<br>                var pos=i;<br>                Oli[i].onclick=(function(){<br>                    console.log(pos);<br>                })(pos);<br>            }–改造以后for(var i=0;i&lt;Oli.length;i++){</p>
<pre><code>        Oli[i].onclick=(function(i){
            return function(){console.log(i)}
        })(i);
}可以不给上面括号的加参数，但是不能不给下面的传参数。但是这个是自执行函数，不点击都会出结果。
</code></pre><p>24：(function(i){<br>                    Oli[i].onclick=function(){<br>                        console.log(i);<br>                    }<br>                })(i)为什么变成这个就是两个都要加I而且他还不会是自执行的函数。<br>15：闭包注意：IE下的内存泄漏：<br>16:函数表达式的形式：var a=function(){console.log(a)};(function(){console.log(a)})() 函数表达式可以直接加一个（）执行。<br>25：函数声明会被欲解析出来，如果我们想要在一些语句中实现不用的函数，一定要用函数表达式。匿名函数表达式和具名函数表达式。<br>26：</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：闭包：一个函数外加上该函数所创建时所建立的作用域。闭包的名字来源于闭包“关闭”一个函数中自由变量的访问的权利。我们所说的变量是自由的，是指该变量定义在函数外部的，而非函数内部。这个不懂。。。。如果一个函数访问了它的外部变量，那么它就是一个闭包。&lt;br&gt;2：functio
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-4/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-4/</id>
    <published>2017-03-07T09:52:18.000Z</published>
    <updated>2017-03-07T10:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>1 :Try{}catch(){}finally{}catch会捕获到前面抛出的异常，无论是直接抛出的还是函数调用的异常。如果想要区分这两种异常。可以使用构造器实现。<br>2：无论发生了什么？finallly是永远都会执行的东西。<br>3：形参是在函数创建的时候括号里面写的东西，实参是在调用函数的时候添加的具体值。<br>4： 函数声明：function add(x,y){return a+b}；<br>5：函数表达式 var add=function(x,y){retrurn a+b;}<br>6: 大多数的Js引擎对于函数对象都会提供一个非标准的name属性，这个对与debug非常有用。<br>7：在定义函数的时候应该使用函数声明：第一是可以函数提升，第二是他们具有名字。<br>8：控制函数的调用：func.apply(thisValue,argArray)<br>9: apply()用在一个函数需要以类似数组的形式接受多个参数，在非面向对象的调用中他是不必要的，这里我们把它设定为null.thisValue这个值是用来制定这个函数执行时this的值。<br>10: bind（thisValue,rg1…argN）会执行原函数的函数功能，他会创立一个新的函数，这个函数会调用原函数，并将this替换为Thisvalue，同时应用以下参数。<br>11:function add(x,y){return x+y}  var ad=add.bind(null,1,2,3,4,5,6,7);<br>12: 参数缺失的时候：形参会被赋予undefined,实参数量多于形参，多余的参数会被忽略。<br>13：arguments是数组但又是非数组的。一方面，他有一个length属性，所有的参数都可以通过索引值来读写。他是一个对象，支持所有的对象的方法和操作。<br>14： 强制性参数，限制参数的最小值。可选参数。通过检测传入的参数的值来时先这一操作。单独使用这一种检测方法会出现漏洞。。。<br>15：非预期的可选参数：如果你要将一个函数c作为另一个函数f的参数引入，那么你需要注意一下另种情况：1：函数f签名声明需要传入的参数。f可能提供多个参数，C决定使用哪个参数。2：C的实际签名，他可能支持的可选参数。<br>[1,2,3].map(function(x){return parseInt(x,10)});必须格外声明函数接受哪些参数，同事你会传入哪些参数。<br>16： 具名参数的优点：他对函数的参数进行了描述，同属对于可选参数的场景的实现也很有帮助。在JS中模拟具名参数。将对象作为一个实参传入函数。function add(numbers){number=numbers||{};var num1=oprions.start||0;var num2=numbers}<br>14： 变量的作用域指的是变量在何处可以访问到。<br>15：js的变量是函数作用域级别的，不像其他的语言，是以块来划分作用域的，在js中，只有函数可以创建新的作用域。<br>16：举个例子就是说，如果你不想总的变量被污染，就可以做一个立即执行函数，把变量包起来。以实现对块的模拟。对于立即执行函数来说。有以下需要注意的：他必须是个表达式，而且后面必须有分号。如果在两个立即执行函数中间漏掉分号，那么系统就会认为他们两个是一个函数调用，前面是函数，后面是变量。<br>17：其他两种方式：!function(){console.log(“123”)}(); void function(){console.log(“hahah”)}();就和后面加分号没关系了。。。<br>18:var x=23;(function(){var t=x<em>2;console.log(t)}());(function (t){console.log(t)}(x</em>2));一开始–后来<br>19：立即执行函数的应用：避免全局变量，隐藏全局作用域的变量。创建新环境避免共享。保持全局对象对于构造器函数的相对独立。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 :Try{}catch(){}finally{}catch会捕获到前面抛出的异常，无论是直接抛出的还是函数调用的异常。如果想要区分这两种异常。可以使用构造器实现。&lt;br&gt;2：无论发生了什么？finallly是永远都会执行的东西。&lt;br&gt;3：形参是在函数创建的时候括号里面
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-4</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-3/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-3/</id>
    <published>2017-03-07T09:51:36.000Z</published>
    <updated>2017-03-07T09:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：原始值与对象最大的区别是如何比较的，每个对象有唯一的标识符并且只和自己相等。相反，所有的原始值只要编码相同，就认为是相等。</p>
<p>2：如果函数中没有任何显示的返回值得话，那么会隐式的返回undefined.</p>
<p>3:undefined更多的时候表示的是不存在的元素，比如未初始的变化量，缺失的参数，访问一个不存在的属性。函数中没有任何显示的返回值。</p>
<p>4：检测undefined.if(x===undefined) {}还可以用typeof 不过一般推荐是第一个方法。</p>
<p>5：null:他的意思是没有对象。常用来表示空值。undefiend表示删除一个对象属性或是数组元素。null表示将属性或者元素设置为空。</p>
<p>6：null：由于Js采用了java中的将变量分为原始值和对象的处理方式。同时也使用java中表示“非对象”的值null.遵循java的例子，当对null强制转换的时候，会出现0.</p>
<p>8：为了弥补上面null的缺点引入了undefiend，那就是这个值没有指向性，这个值强制转换不回变成0。</p>
<p>7：防止改变undefiend:if(x===void){}</p>
<p>9：null出现：当正则匹配不到，或者是对象间没有原型关系的时候。</p>
<p>10: typeof能检测原始值和对象，并检测出原始值得类型。</p>
<p>11:instanceof 用来检测一个对象是否是特定构造函数的一个实例。</p>
<p>12：typeof null=object   null instanceof  object().false.</p>
<p>13:NaN 他的类型居然是number 出现的原因：number()中不能被解析的数字。失败的操作Math.log(-1) 其中一个数是NaN的计算。</p>
<p>14：检查一个值是否是NaN  function(value) {retrun value!==value;还有个原生函数：isNaN（）；</p>
<p>为什么IsNaN（）不能检测非数字。。。他的原理是这样的：先把这些值转为数字，然后转换可能变成NaN,所以返回错误的结果。最好就是检测值的类型，并且使用IsNaN（）函数。</p>
<p>15：infinity：是一个错误值，一是表示一个大到无法表示的数，一是表示一个数除了0.infinity比任何数字都大。-infinity比任何值都小。</p>
<p>16：全局函数isFinite();检测一个数字是不是实际的值。既不是NAN也不是infinity.</p>
<p>17:由于js中所有的数字和符号是分开存储的，所以每一个非负数都由一个负值，包括0.有符号的0可以知道数字是从哪方面接近0的。</p>
<p>18：js数字是64位的，也叫做双精度。通常是按照十进制引入的，但是在内部时他们其实是二进制的浮点数表示的。在处理舍入错误的时候，通常推荐的是不直接比较非整数，取而代之，将边界错误的上界考虑进来。这个上界叫机器精度。把他变大来比较细微的差别。</p>
<p>19：整型数字的范围问题：安全整型：+-Math.pow(2,53)  数组索引：【0，Math.pow(2,32)-1】通常情况下，和不超过53位的整型数字打交道是没问题的，一旦遇到这些超过的，他们必须要以字符串的形式存储起来，一旦要对他们进行运算，要特殊的库来实现。</p>
<p>20：安全的整型：js只能安全的表示上述所说的范围内的数，一旦超过这个范围内的整型。，那么久和一般的实数集可能不会发生一一对应的关系了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：原始值与对象最大的区别是如何比较的，每个对象有唯一的标识符并且只和自己相等。相反，所有的原始值只要编码相同，就认为是相等。&lt;/p&gt;
&lt;p&gt;2：如果函数中没有任何显示的返回值得话，那么会隐式的返回undefined.&lt;/p&gt;
&lt;p&gt;3:undefined更多的时候表示的是
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-3</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-2/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-2/</id>
    <published>2017-03-07T09:50:27.000Z</published>
    <updated>2017-03-07T09:58:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：所有的运算符都会强制要求他们的运算数为合适的类型。大部分运算符只会对原始值有效，这意味着对象在运算之前会被转换成原始值。【1，2】+【3】1,23.</p>
<p>2:[‘li’,2]+[2]-li,22   [1,2]+{name:”ha”}–NAN辛亏是这个….</p>
<p>3:obj[‘age’]=20,如果是方括号给对象加属性的话就这样玩。</p>
<p>4：=== 相等的如下。</p>
<p>5：undefined===undefined  ,,null===null,undefined==null,+0===-0,NaN!==NaN 特别要注意的就是两个对象的比较。</p>
<p>6：陷阱1：</p>
<p>7:陷阱2：宽松相等中的字符串。</p>
<p>8陷阱3：宽松相等中的对象。如果比较对象和非对象，他们会被转换为原始值，这将导致一些奇怪的结果。</p>
<p>9:用法：检测 undefined,null if(x!==undefiend&amp;&amp;x!==null){}–更简单的 if(x!=null)实现的效果是一样的。</p>
<p>10：检测处输入值是什么？ if(Number(x)==123){}</p>
<p>11：加号运算符注意的两点：只要一个运算数是字符串，另一个就会转换为字符串相加。否则转变为两个运算数并且相加算他们的和，包括布尔值。。所以要特别注意他们的顺序，因为顺序的改变会造成这两中情况的出现。</p>
<p>12：布尔运算符（二元运算符和逻辑非）数字运算符（数字运算符，位运算符）都是那种只有一个值，并且返回结果是原值的例子。</p>
<p>13：vodi运算符，是用来表示那些不需要返回值的地方。比如你添加一个标签。当你想要打开一个新的窗口而不想要改变当前的显示内容的话就可以这样 javascript:viod window.open(‘<a href="http://example.com" target="_blank" rel="external">http://example.com</a>‘)</p>
<p>14:转换为flase的boolean()函数值有这些。NAN,0,’’,false,undefied,null. 注意Boolean(‘false’).这里false是一个字符串，所以他是正确的。true.</p>
<p>15:三种转换布尔值得方法：blloeab().  value?true:false. !!value.</p>
<p>16:除了上面列举的那些，所有其他的都是真值，甚至空对象，空数组，以及new Blloean(false)。</p>
<p>17：逻辑运算符：总是会返回两个中间的一个值，一旦一个返回，后面的东西就不看了。</p>
<p>18：逻辑运算符：为选的东西添加一个默认值。text=text||’’;还可以为结果添加默认值。总之就是有和没二选一的时候可以用这个。</p>
<p>19：Boolean（）函数的两种用法，1：boolean(value)  2:new Boolean(flase);</p>
<p>19:</p>
<p>{}==’[object,object]’-true  [‘123’]==123 []==0–true</p>
<p>然而，只有当两个对象是同一个对象时才会相等，这意味着没法真真比较两个包装对象。都是错误。false.</p>
<p>7：宽松相等和布尔转换不一样。他们的原理不一样。</p>
<p>2==true  //2==1–false</p>
<p>2==false //2==0–false</p>
<p>1==true //1==1–true</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：所有的运算符都会强制要求他们的运算数为合适的类型。大部分运算符只会对原始值有效，这意味着对象在运算之前会被转换成原始值。【1，2】+【3】1,23.&lt;/p&gt;
&lt;p&gt;2:[‘li’,2]+[2]-li,22   [1,2]+{name:”ha”}–NAN辛亏是这个….&lt;/
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-2</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-1/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-1/</id>
    <published>2017-03-07T09:49:04.000Z</published>
    <updated>2017-03-07T09:50:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：显示问题的唯一来源是css。行为问题的唯一来源是Js.</p>
<p>2:方括号访问法的好处是可以通过变量来访问元素属性。</p>
<p>3：优化内存占用是最优的方式，一旦发现数据不再使用，就把他变成null.</p>
<p>4:如果初始化变量没有用到var 会自动归到全局环境中。甚至还会出现很多不可预料的错误。</p>
<p>5：绝对定位可以脱离当前文档流，甚至别的元素都不知道有这个东西。</p>
<p>6：当scale()被添加负值的时候，会让一个元素来回翻转。</p>
<p>7：base64图片是在网速不好的时候，优先然内容加载和减少http的请求次数来减少网站服务器的负担。当网速不好的时候去访问天猫的网站的时候，在页面没有出来的时候会出现一个小猫的图标。增加了用户体验，实现原理就是把base64的编码放大css中。是因为css先于页面内容加载的。一堆连续字母，最后有1~2个”=”的代码就是base64。这样做可以减少http请求，某些文件可以避免跨域的问题。没有图片更新要重新上传，还要清理缓存。</p>
<p>8：需要用这个图的地方：一些图片自诞生之处，就很少需要改变。这类图片尺寸很小。这类图片在网站中需要大量使用。</p>
<p>9：想要删除一个节点的时候，先找到他的父元素，从父元素那里removeChild();</p>
<p>10:script标签也有自己的一些属性来调节自己文件执行的顺序，但是就是不知道现在的兼容性怎么样？</p>
<p>11：递增，递减符号可以对任何类型的值使用，但是那个操作的实际意义是什么？</p>
<p>12：字符串必须写在双引号里面，想在里面添加特殊字符，必须要用转义字符。\</p>
<p>13:给元素添加属性：！符号可以改变具有布尔属性值的正确与否。</p>
<p>14：虽然Boolean()的值只有两个，但是js函数中所有类型的值都可以转成与这两个值等价。!完全代替，一个符号。。</p>
<p>15：number()方法是强制转换整个字符串，由于他的转换他复杂，一般情况下都是用parseInt()来转的，他的第二个参数用来限制要转的进制。</p>
<p>16：字符串是不能被改变的，当他被创建出来的，除非再次删除，重新创建一个。</p>
<p>17：逻辑与&amp;&amp;属于短路操作符，即当前面的条件出结果后，后面就不会再就算了。可以利用或的这一行为来避免变量赋值为null,undefined.</p>
<p>18：字符串之间比较大小是在比价哦两个字符串中的对应的每个字符的编码值。和加减操作一样，这些在比较相等都是先转换格式在比，那不是废话么？如果你格式都不一样，还提什么别的东西。</p>
<p>19：return 可以不带参数，当需要停止当前函数又不需要返回值的时候就可以这么做。</p>
<p>20：没有真正意义上的重载，有的只是覆盖，后一个覆盖前一个。不存在函数签名的概念。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：显示问题的唯一来源是css。行为问题的唯一来源是Js.&lt;/p&gt;
&lt;p&gt;2:方括号访问法的好处是可以通过变量来访问元素属性。&lt;/p&gt;
&lt;p&gt;3：优化内存占用是最优的方式，一旦发现数据不再使用，就把他变成null.&lt;/p&gt;
&lt;p&gt;4:如果初始化变量没有用到var 会自动归到
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>js-1</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-0/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/07/best-1-0/</id>
    <published>2017-03-07T09:45:05.000Z</published>
    <updated>2017-03-07T09:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>1：对象只能和自己相等。甚至两个空对象都不相等。</p>
<p>2：基本类型都是不可以添加属性的。</p>
<p>3：利用arr.length可以做出很多精彩的操作。</p>
<p>4：typeOf ,instanceOf 分别是用来检测基本变量和对象的属性的。</p>
<p>5：typeOf {}:object,typeOf undefined:undefined,typeOf null:object,typeOf true boolean.</p>
<p>6:Boolean()是一个用来测试真假的函数，只会返回布尔值。Boolean({}),Boolean([]),返回true。表示里面有0个元素这是对的。。</p>
<p>7：Js中所有的数字都是浮点数。1===1.000。</p>
<p>8：函数声明具有提升的特性，这意味着我们可以用到下面定义的函数，但是var 声明的变量，只会提升变量的位置，而不会去管他的值得位置在哪。</p>
<p>9：数组可以有自己的属性，因为他本质上是一个对象。</p>
<p>10：在使用this的时候可以把不同层次的this保存起来就不会出现this指代不明的情况了。</p>
<p>11：立即执行函数可以使防止全局变量的出现。</p>
<p>12：闭包会持续的与内部变量连接，但是有的时候我们可能不需要这个东西.</p>
<p>13：数组当中可以添加对象，对象中也可以添加数组。</p>
<p>14：通过【】或是“.”来应用对象属性或数组元素的值来构成一个表达式。</p>
<p>15：用var 定义的变量，成为该定义域内的局部变量，这个变量在退出取得时候就会立刻被销毁</p>
<p>16：表示输入的最大和最小值，每个字母都是大写或者小写的。</p>
<p>17：不同类型之间加减号操作引发强制转换。</p>
<p>18：速度永远让人兴奋。</p>
<p>19：在编写dom脚本的时候，你会想当然的认为这个是dom元素节点，这是一种常见的错误，可以查看这个元素的nodeType属性，许多只能在元素节点的方法，是不能用在文本节点的。</p>
<p>20：函数名字命名的时候：getresult. isShow.</p>
<p>当需要引出对象内的函数，他所指的对象可能会发生变化，这个时候需要给他加个bind(此处是原来的对象名字)；让他找到回家的路就可以了。<br>var result=[];</p>
<p>for(var I=0;i&lt;6;i++){</p>
<p>result[I]=i……..result.push(i);都可以的。</p>
<p>result.push(function(){return I;}) 返回的都是空函数为什么？但是只要把这个变成立即执行函数就可以了。。</p>
<p>}<br>function pair(x,y){x=x||0;y=y||0;return  [x,y];}</p>
<p>pair():[0,0]</p>
<p>利用这个特性可以做到自动填充东西。可以给他后面加上数组。就可以填充名字了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1：对象只能和自己相等。甚至两个空对象都不相等。&lt;/p&gt;
&lt;p&gt;2：基本类型都是不可以添加属性的。&lt;/p&gt;
&lt;p&gt;3：利用arr.length可以做出很多精彩的操作。&lt;/p&gt;
&lt;p&gt;4：typeOf ,instanceOf 分别是用来检测基本变量和对象的属性的。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Code" scheme="https://github.com/skoll1/libateer.github.io/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/skoll1/libateer.github.io/2017/03/05/hello-world/"/>
    <id>https://github.com/skoll1/libateer.github.io/2017/03/05/hello-world/</id>
    <published>2017-03-05T12:10:52.000Z</published>
    <updated>2017-03-05T12:10:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
